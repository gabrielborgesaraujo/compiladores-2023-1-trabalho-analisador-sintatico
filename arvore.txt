(program (declaration (funDecl fun (function a1 ( (parameters a) ) (block { (declaration (statement (returnStmt return (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary a))) * (unary (call (primary 2))))))))))) ;))) })))) (declaration (funDecl fun (function a2 ( (parameters b) ) (block { (declaration (statement (returnStmt return (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary a))) / (unary (call (primary 2))))))))))) ;))) })))) (declaration (statement (printStmt print (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary a1) ( (arguments (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary 4)))))))))))) ))) * (unary (call (primary a2) ( (arguments (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary 10)))))))))))) ))))))))))) ;))) (declaration (statement (printStmt print (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary a2) ( (arguments (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary 5)))))))))))) ))) / (unary (call (primary a1) ( (arguments (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary 50)))))))))))) ))))))))))) ;))) (declaration (varDecl var c = (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary nil))))))))))) ;)) (declaration (statement (ifStmt if ( (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary a1) ( (arguments (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary 4)))))))))))) ))))) > (term (factor (unary (call (primary 5))))))))))) ) (statement (block { (declaration (statement (printStmt print (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary "ok"))))))))))) ;))) }))))) (declaration (statement (exprStmt (expression (assignment c = (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary 40)))))))))))) ;))) (declaration (statement (printStmt print (expression (assignment (logic_or (logic_and (equality (comparison (term (factor (unary (call (primary c))))))))))) ;))) <EOF>)